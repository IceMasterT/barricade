trigger:
  branches:
    include:
    - master
  paths:
    exclude:
    - README.md
    - .devcontainer
pr:
- master

resources:
  containers:
  - container: postgres
    image: postgres:11.3
    ports:
    - 5432
    env:
      POSTGRES_PASSWORD: testpassword
      POSTGRES_USER: testuser

pool:
  vmImage: 'ubuntu-20.04'

stages:
- stage: Build
  displayName: Full Clean Build
  jobs:
  - job: build
    services:
      postgres: postgres
    variables:
      db_url: postgresql://testuser:testpassword@localhost:${AGENT_SERVICES_POSTGRES_PORTS_5432}/strongcoin
      diesel_db_url: postgresql://testuser:testpassword@127.0.01:${AGENT_SERVICES_POSTGRES_PORTS_5432}/strongcoin
    displayName: Full Clean Build
    steps:
        
    - task: Cache@2
      inputs:
        key: 'target | "$(Agent.OS)" | Cargo.lock'
        restoreKeys: |
          target | "$(Agent.OS)"
        path: target
      displayName: Cache Cargo Target Folder
        
    - task: Cache@2
      inputs:
        key: 'npm | "$(Agent.OS)" | package-lock.json'
        restoreKeys: |
          npm | "$(Agent.OS)"
        path: .npm
      displayName: auth npm
    
    # Run Migrations using diesel which we have pre-built into a container
    - script: |
        docker run --rm --network host -v "$(pwd)":/app -w /app ianpurton/rust-diesel diesel --database-url="$(diesel_db_url)" setup
      displayName: 'Run Migrations'

    - script: |
        set -e
        EXE_NAME=contor
        export DATABASE_URL=$(db_url)
        DEBIAN_FRONTEND=noninteractive sudo apt-get install musl-dev musl-tools musl
        rustup target add x86_64-unknown-linux-musl
        npm ci --cache .npm
        npm run release
        cargo build --release --target x86_64-unknown-linux-musl --locked
        strip target/x86_64-unknown-linux-musl/release/$EXE_NAME
      displayName: Build Auth Server
    
    - publish: 'target/x86_64-unknown-linux-musl/release/auth'
      displayName: 'Publish Artifact: Compiled UI Release Binary'
      artifact: auth
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    
    - publish: 'asset-pipeline/dist'
      displayName: 'Publish Artifact: Compiled UI Release Binary'
      artifact: auth-assets
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

# Testing containers
# docker login registryname.azurecr.io use username/password from portal page
# docker run -it --rm -p 50051:50051 registryname.azurecr.io/tonic-server:278 <- use the build id
- stage: containterize
  displayName: Create Docker Containers
  jobs:
  - deployment: Containterize
    displayName: Build Docker Containers
    pool:
      vmImage: 'ubuntu-20.04'
    # creates an environment if it doesn't exist
    environment: 'Container Deployment'
    strategy:
      runOnce:
        deploy:
          steps:
          # All available artifacts
          - download: current

          # Build the Auth
          - script: |
              EXE_NAME=contor
              set -e
              cd $(Pipeline.Workspace)
              chmod +x ./$EXE_NAME/$EXE_NAME
              echo 'FROM scratch' > ./Dockerfile
              echo "COPY ./$EXE_NAME/$EXE_NAME /rust-executable" >> ./Dockerfile
              echo 'COPY ./auth-assets /asset-pipeline/dist' >> ./Dockerfile
              echo 'CMD ["/rust-executable"]' >> ./Dockerfile
              docker build -t contorsystems/contor .
            displayName: 'Build Auth Image'

          # Push the containers
          - script: |
              set -e
              docker login -u $(USERNAME) -p $(DOCKERHUB_ACCESS_TOKEN) 
              docker push contorsystems/contor
            displayName: 'Push all the images to the container registry'